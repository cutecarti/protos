// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: aliver/aliver.proto

package aliverv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Alive_Alive_FullMethodName = "/aliver.Alive/Alive"
)

// AliveClient is the client API for Alive service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AliveClient interface {
	Alive(ctx context.Context, in *HasAliveRequest, opts ...grpc.CallOption) (*HasAliveResponse, error)
}

type aliveClient struct {
	cc grpc.ClientConnInterface
}

func NewAliveClient(cc grpc.ClientConnInterface) AliveClient {
	return &aliveClient{cc}
}

func (c *aliveClient) Alive(ctx context.Context, in *HasAliveRequest, opts ...grpc.CallOption) (*HasAliveResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HasAliveResponse)
	err := c.cc.Invoke(ctx, Alive_Alive_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AliveServer is the server API for Alive service.
// All implementations must embed UnimplementedAliveServer
// for forward compatibility.
type AliveServer interface {
	Alive(context.Context, *HasAliveRequest) (*HasAliveResponse, error)
	mustEmbedUnimplementedAliveServer()
}

// UnimplementedAliveServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAliveServer struct{}

func (UnimplementedAliveServer) Alive(context.Context, *HasAliveRequest) (*HasAliveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Alive not implemented")
}
func (UnimplementedAliveServer) mustEmbedUnimplementedAliveServer() {}
func (UnimplementedAliveServer) testEmbeddedByValue()               {}

// UnsafeAliveServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AliveServer will
// result in compilation errors.
type UnsafeAliveServer interface {
	mustEmbedUnimplementedAliveServer()
}

func RegisterAliveServer(s grpc.ServiceRegistrar, srv AliveServer) {
	// If the following call pancis, it indicates UnimplementedAliveServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Alive_ServiceDesc, srv)
}

func _Alive_Alive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HasAliveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AliveServer).Alive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Alive_Alive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AliveServer).Alive(ctx, req.(*HasAliveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Alive_ServiceDesc is the grpc.ServiceDesc for Alive service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Alive_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "aliver.Alive",
	HandlerType: (*AliveServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Alive",
			Handler:    _Alive_Alive_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "aliver/aliver.proto",
}
